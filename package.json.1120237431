/*
 * tst.werror.js: tests basic functionality of the WError class.
 */

var mod_assert = require('assert');
var mod_verror = require('../lib/verror');

var VError = mod_verror.VError;
var WError = mod_verror.WError;

var err, suberr, stack, substack;

/*
 * Remove full paths and relative line numbers from stack traces so that we can
 * compare against "known-good" output.
 */
function cleanStack(stacktxt)
{
	var re = new RegExp(__filename + ':\\d+:\\d+', 'gm');
	stacktxt = stacktxt.replace(re, 'tst.werror.js');
	return (stacktxt);
}

/*
 * Save the generic parts of all stack traces so we can avoid hardcoding
 * Node-specific implementation details in our testing of stack traces.
 */
var nodestack = new Error().stack.split('\n').slice(2).join('\n');

/* no arguments */
err = new WError();
mod_assert.equal(err.name, 'WError');
mod_assert.ok(err instanceof Error);
mod_assert.ok(err instanceof WError);
mod_assert.equal(err.message, '');
mod_assert.equal(err.toString(), 'WError');
mod_assert.ok(err.cause() === undefined);
stack = cleanStack(err.stack);
mod_assert.equal(stack, [
    'WError',
    '    at Object.<anonymous> (tst.werror.js)'
].join('\n') + '\n' + nodestack);

/* options-argument form */
err = new WError({});
mod_assert.equal(err.message, '');
mod_assert.equal(err.toString(), 'WError');
mod_assert.ok(err.cause() === undefined);

/* simple message */
err = new WError('my error');
mod_assert.equal(err.message, 'my error');
mod_assert.equal(err.toString(), 'WError: my error');
mod_assert.ok(err.cause() === undefined);
stack = cleanStack(err.stack);
mod_assert.equal(stack, [
    'WError: my error',
    '    at Object.<anonymous> (tst.werror.js)'
].join('\n') + '\n' + nodestack);

err = new WError({}, 'my error');
mod_assert.equal(err.message, 'my error'